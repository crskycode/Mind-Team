#include "cl_dll.h"
#include "qgl.h"
#include "sys.h"

void (APIENTRY *qglAccum)(GLenum op, GLfloat value) = NULL;
void (APIENTRY *qglAlphaFunc)(GLenum func, GLclampf ref) = NULL;
GLboolean (APIENTRY *qglAreTexturesResident)(GLsizei n, const GLuint *textures, GLboolean *residences) = NULL;
void (APIENTRY *qglArrayElement)(GLint i) = NULL;
void (APIENTRY *qglBegin)(GLenum mode) = NULL;
void (APIENTRY *qglBindTexture)(GLenum target, GLuint texture) = NULL;
void (APIENTRY *qglBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) = NULL;
void (APIENTRY *qglBlendFunc)(GLenum sfactor, GLenum dfactor) = NULL;
void (APIENTRY *qglCallList)(GLuint list) = NULL;
void (APIENTRY *qglCallLists)(GLsizei n, GLenum type, const GLvoid *lists) = NULL;
void (APIENTRY *qglClear)(GLbitfield mask) = NULL;
void (APIENTRY *qglClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (APIENTRY *qglClearColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) = NULL;
void (APIENTRY *qglClearDepth)(GLclampd depth) = NULL;
void (APIENTRY *qglClearIndex)(GLfloat c) = NULL;
void (APIENTRY *qglClearStencil)(GLint s) = NULL;
void (APIENTRY *qglClipPlane)(GLenum plane, const GLdouble *equation) = NULL;
void (APIENTRY *qglColor3b)(GLbyte red, GLbyte green, GLbyte blue) = NULL;
void (APIENTRY *qglColor3bv)(const GLbyte *v) = NULL;
void (APIENTRY *qglColor3d)(GLdouble red, GLdouble green, GLdouble blue) = NULL;
void (APIENTRY *qglColor3dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglColor3f)(GLfloat red, GLfloat green, GLfloat blue) = NULL;
void (APIENTRY *qglColor3fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglColor3i)(GLint red, GLint green, GLint blue) = NULL;
void (APIENTRY *qglColor3iv)(const GLint *v) = NULL;
void (APIENTRY *qglColor3s)(GLshort red, GLshort green, GLshort blue) = NULL;
void (APIENTRY *qglColor3sv)(const GLshort *v) = NULL;
void (APIENTRY *qglColor3ub)(GLubyte red, GLubyte green, GLubyte blue) = NULL;
void (APIENTRY *qglColor3ubv)(const GLubyte *v) = NULL;
void (APIENTRY *qglColor3ui)(GLuint red, GLuint green, GLuint blue) = NULL;
void (APIENTRY *qglColor3uiv)(const GLuint *v) = NULL;
void (APIENTRY *qglColor3us)(GLushort red, GLushort green, GLushort blue) = NULL;
void (APIENTRY *qglColor3usv)(const GLushort *v) = NULL;
void (APIENTRY *qglColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) = NULL;
void (APIENTRY *qglColor4bv)(const GLbyte *v) = NULL;
void (APIENTRY *qglColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) = NULL;
void (APIENTRY *qglColor4dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (APIENTRY *qglColor4fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglColor4i)(GLint red, GLint green, GLint blue, GLint alpha) = NULL;
void (APIENTRY *qglColor4iv)(const GLint *v) = NULL;
void (APIENTRY *qglColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha) = NULL;
void (APIENTRY *qglColor4sv)(const GLshort *v) = NULL;
void (APIENTRY *qglColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) = NULL;
void (APIENTRY *qglColor4ubv)(const GLubyte *v) = NULL;
void (APIENTRY *qglColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha) = NULL;
void (APIENTRY *qglColor4uiv)(const GLuint *v) = NULL;
void (APIENTRY *qglColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha) = NULL;
void (APIENTRY *qglColor4usv)(const GLushort *v) = NULL;
void (APIENTRY *qglColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = NULL;
void (APIENTRY *qglColorMaterial)(GLenum face, GLenum mode) = NULL;
void (APIENTRY *qglColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) = NULL;
void (APIENTRY *qglCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) = NULL;
void (APIENTRY *qglCopyTexImage1D)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border) = NULL;
void (APIENTRY *qglCopyTexImage2D)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = NULL;
void (APIENTRY *qglCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = NULL;
void (APIENTRY *qglCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (APIENTRY *qglCullFace)(GLenum mode) = NULL;
void (APIENTRY *qglDeleteLists)(GLuint list, GLsizei range) = NULL;
void (APIENTRY *qglDeleteTextures)(GLsizei n, const GLuint *textures) = NULL;
void (APIENTRY *qglDepthFunc)(GLenum func) = NULL;
void (APIENTRY *qglDepthMask)(GLboolean flag) = NULL;
void (APIENTRY *qglDepthRange)(GLclampd zNear, GLclampd zFar) = NULL;
void (APIENTRY *qglDisable)(GLenum cap) = NULL;
void (APIENTRY *qglDisableClientState)(GLenum array) = NULL;
void (APIENTRY *qglDrawArrays)(GLenum mode, GLint first, GLsizei count) = NULL;
void (APIENTRY *qglDrawBuffer)(GLenum mode) = NULL;
void (APIENTRY *qglDrawElements)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) = NULL;
void (APIENTRY *qglDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void (APIENTRY *qglEdgeFlag)(GLboolean flag) = NULL;
void (APIENTRY *qglEdgeFlagPointer)(GLsizei stride, const GLvoid *pointer) = NULL;
void (APIENTRY *qglEdgeFlagv)(const GLboolean *flag) = NULL;
void (APIENTRY *qglEnable)(GLenum cap) = NULL;
void (APIENTRY *qglEnableClientState)(GLenum array) = NULL;
void (APIENTRY *qglEnd)(void) = NULL;
void (APIENTRY *qglEndList)(void) = NULL;
void (APIENTRY *qglEvalCoord1d)(GLdouble u) = NULL;
void (APIENTRY *qglEvalCoord1dv)(const GLdouble *u) = NULL;
void (APIENTRY *qglEvalCoord1f)(GLfloat u) = NULL;
void (APIENTRY *qglEvalCoord1fv)(const GLfloat *u) = NULL;
void (APIENTRY *qglEvalCoord2d)(GLdouble u, GLdouble v) = NULL;
void (APIENTRY *qglEvalCoord2dv)(const GLdouble *u) = NULL;
void (APIENTRY *qglEvalCoord2f)(GLfloat u, GLfloat v) = NULL;
void (APIENTRY *qglEvalCoord2fv)(const GLfloat *u) = NULL;
void (APIENTRY *qglEvalMesh1)(GLenum mode, GLint i1, GLint i2) = NULL;
void (APIENTRY *qglEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) = NULL;
void (APIENTRY *qglEvalPoint1)(GLint i) = NULL;
void (APIENTRY *qglEvalPoint2)(GLint i, GLint j) = NULL;
void (APIENTRY *qglFeedbackBuffer)(GLsizei size, GLenum type, GLfloat *buffer) = NULL;
void (APIENTRY *qglFinish)(void) = NULL;
void (APIENTRY *qglFlush)(void) = NULL;
void (APIENTRY *qglFogf)(GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglFogfv)(GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglFogi)(GLenum pname, GLint param) = NULL;
void (APIENTRY *qglFogiv)(GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglFrontFace)(GLenum mode) = NULL;
void (APIENTRY *qglFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
GLuint (APIENTRY *qglGenLists)(GLsizei range) = NULL;
void (APIENTRY *qglGenTextures)(GLsizei n, GLuint *textures) = NULL;
void (APIENTRY *qglGetBooleanv)(GLenum pname, GLboolean *params) = NULL;
void (APIENTRY *qglGetClipPlane)(GLenum plane, GLdouble *equation) = NULL;
void (APIENTRY *qglGetDoublev)(GLenum pname, GLdouble *params) = NULL;
GLenum (APIENTRY *qglGetError)(void) = NULL;
void (APIENTRY *qglGetFloatv)(GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetIntegerv)(GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetLightfv)(GLenum light, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetLightiv)(GLenum light, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetMapdv)(GLenum target, GLenum query, GLdouble *v) = NULL;
void (APIENTRY *qglGetMapfv)(GLenum target, GLenum query, GLfloat *v) = NULL;
void (APIENTRY *qglGetMapiv)(GLenum target, GLenum query, GLint *v) = NULL;
void (APIENTRY *qglGetMaterialfv)(GLenum face, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetMaterialiv)(GLenum face, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetPixelMapfv)(GLenum map, GLfloat *values) = NULL;
void (APIENTRY *qglGetPixelMapuiv)(GLenum map, GLuint *values) = NULL;
void (APIENTRY *qglGetPixelMapusv)(GLenum map, GLushort *values) = NULL;
void (APIENTRY *qglGetPointerv)(GLenum pname, GLvoid* *params) = NULL;
void (APIENTRY *qglGetPolygonStipple)(GLubyte *mask) = NULL;
const GLubyte * (APIENTRY *qglGetString)(GLenum name) = NULL;
void (APIENTRY *qglGetTexEnvfv)(GLenum target, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetTexEnviv)(GLenum target, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetTexGendv)(GLenum coord, GLenum pname, GLdouble *params) = NULL;
void (APIENTRY *qglGetTexGenfv)(GLenum coord, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetTexGeniv)(GLenum coord, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) = NULL;
void (APIENTRY *qglGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetTexParameteriv)(GLenum target, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglHint)(GLenum target, GLenum mode) = NULL;
void (APIENTRY *qglIndexMask)(GLuint mask) = NULL;
void (APIENTRY *qglIndexPointer)(GLenum type, GLsizei stride, const GLvoid *pointer) = NULL;
void (APIENTRY *qglIndexd)(GLdouble c) = NULL;
void (APIENTRY *qglIndexdv)(const GLdouble *c) = NULL;
void (APIENTRY *qglIndexf)(GLfloat c) = NULL;
void (APIENTRY *qglIndexfv)(const GLfloat *c) = NULL;
void (APIENTRY *qglIndexi)(GLint c) = NULL;
void (APIENTRY *qglIndexiv)(const GLint *c) = NULL;
void (APIENTRY *qglIndexs)(GLshort c) = NULL;
void (APIENTRY *qglIndexsv)(const GLshort *c) = NULL;
void (APIENTRY *qglIndexub)(GLubyte c) = NULL;
void (APIENTRY *qglIndexubv)(const GLubyte *c) = NULL;
void (APIENTRY *qglInitNames)(void) = NULL;
void (APIENTRY *qglInterleavedArrays)(GLenum format, GLsizei stride, const GLvoid *pointer) = NULL;
GLboolean (APIENTRY *qglIsEnabled)(GLenum cap) = NULL;
GLboolean (APIENTRY *qglIsList)(GLuint list) = NULL;
GLboolean (APIENTRY *qglIsTexture)(GLuint texture) = NULL;
void (APIENTRY *qglLightModelf)(GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglLightModelfv)(GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglLightModeli)(GLenum pname, GLint param) = NULL;
void (APIENTRY *qglLightModeliv)(GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglLightf)(GLenum light, GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglLightfv)(GLenum light, GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglLighti)(GLenum light, GLenum pname, GLint param) = NULL;
void (APIENTRY *qglLightiv)(GLenum light, GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglLineStipple)(GLint factor, GLushort pattern) = NULL;
void (APIENTRY *qglLineWidth)(GLfloat width) = NULL;
void (APIENTRY *qglListBase)(GLuint base) = NULL;
void (APIENTRY *qglLoadIdentity)(void) = NULL;
void (APIENTRY *qglLoadMatrixd)(const GLdouble *m) = NULL;
void (APIENTRY *qglLoadMatrixf)(const GLfloat *m) = NULL;
void (APIENTRY *qglLoadName)(GLuint name) = NULL;
void (APIENTRY *qglLogicOp)(GLenum opcode) = NULL;
void (APIENTRY *qglMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) = NULL;
void (APIENTRY *qglMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) = NULL;
void (APIENTRY *qglMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) = NULL;
void (APIENTRY *qglMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) = NULL;
void (APIENTRY *qglMapGrid1d)(GLint un, GLdouble u1, GLdouble u2) = NULL;
void (APIENTRY *qglMapGrid1f)(GLint un, GLfloat u1, GLfloat u2) = NULL;
void (APIENTRY *qglMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) = NULL;
void (APIENTRY *qglMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) = NULL;
void (APIENTRY *qglMaterialf)(GLenum face, GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglMaterialfv)(GLenum face, GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglMateriali)(GLenum face, GLenum pname, GLint param) = NULL;
void (APIENTRY *qglMaterialiv)(GLenum face, GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglMatrixMode)(GLenum mode) = NULL;
void (APIENTRY *qglMultMatrixd)(const GLdouble *m) = NULL;
void (APIENTRY *qglMultMatrixf)(const GLfloat *m) = NULL;
void (APIENTRY *qglNewList)(GLuint list, GLenum mode) = NULL;
void (APIENTRY *qglNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz) = NULL;
void (APIENTRY *qglNormal3bv)(const GLbyte *v) = NULL;
void (APIENTRY *qglNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz) = NULL;
void (APIENTRY *qglNormal3dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz) = NULL;
void (APIENTRY *qglNormal3fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglNormal3i)(GLint nx, GLint ny, GLint nz) = NULL;
void (APIENTRY *qglNormal3iv)(const GLint *v) = NULL;
void (APIENTRY *qglNormal3s)(GLshort nx, GLshort ny, GLshort nz) = NULL;
void (APIENTRY *qglNormal3sv)(const GLshort *v) = NULL;
void (APIENTRY *qglNormalPointer)(GLenum type, GLsizei stride, const GLvoid *pointer) = NULL;
void (APIENTRY *qglOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
void (APIENTRY *qglPassThrough)(GLfloat token) = NULL;
void (APIENTRY *qglPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat *values) = NULL;
void (APIENTRY *qglPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint *values) = NULL;
void (APIENTRY *qglPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort *values) = NULL;
void (APIENTRY *qglPixelStoref)(GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglPixelStorei)(GLenum pname, GLint param) = NULL;
void (APIENTRY *qglPixelTransferf)(GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglPixelTransferi)(GLenum pname, GLint param) = NULL;
void (APIENTRY *qglPixelZoom)(GLfloat xfactor, GLfloat yfactor) = NULL;
void (APIENTRY *qglPointSize)(GLfloat size) = NULL;
void (APIENTRY *qglPolygonMode)(GLenum face, GLenum mode) = NULL;
void (APIENTRY *qglPolygonOffset)(GLfloat factor, GLfloat units) = NULL;
void (APIENTRY *qglPolygonStipple)(const GLubyte *mask) = NULL;
void (APIENTRY *qglPopAttrib)(void) = NULL;
void (APIENTRY *qglPopClientAttrib)(void) = NULL;
void (APIENTRY *qglPopMatrix)(void) = NULL;
void (APIENTRY *qglPopName)(void) = NULL;
void (APIENTRY *qglPrioritizeTextures)(GLsizei n, const GLuint *textures, const GLclampf *priorities) = NULL;
void (APIENTRY *qglPushAttrib)(GLbitfield mask) = NULL;
void (APIENTRY *qglPushClientAttrib)(GLbitfield mask) = NULL;
void (APIENTRY *qglPushMatrix)(void) = NULL;
void (APIENTRY *qglPushName)(GLuint name) = NULL;
void (APIENTRY *qglRasterPos2d)(GLdouble x, GLdouble y) = NULL;
void (APIENTRY *qglRasterPos2dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglRasterPos2f)(GLfloat x, GLfloat y) = NULL;
void (APIENTRY *qglRasterPos2fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglRasterPos2i)(GLint x, GLint y) = NULL;
void (APIENTRY *qglRasterPos2iv)(const GLint *v) = NULL;
void (APIENTRY *qglRasterPos2s)(GLshort x, GLshort y) = NULL;
void (APIENTRY *qglRasterPos2sv)(const GLshort *v) = NULL;
void (APIENTRY *qglRasterPos3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (APIENTRY *qglRasterPos3dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglRasterPos3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (APIENTRY *qglRasterPos3fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglRasterPos3i)(GLint x, GLint y, GLint z) = NULL;
void (APIENTRY *qglRasterPos3iv)(const GLint *v) = NULL;
void (APIENTRY *qglRasterPos3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (APIENTRY *qglRasterPos3sv)(const GLshort *v) = NULL;
void (APIENTRY *qglRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (APIENTRY *qglRasterPos4dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (APIENTRY *qglRasterPos4fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglRasterPos4i)(GLint x, GLint y, GLint z, GLint w) = NULL;
void (APIENTRY *qglRasterPos4iv)(const GLint *v) = NULL;
void (APIENTRY *qglRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (APIENTRY *qglRasterPos4sv)(const GLshort *v) = NULL;
void (APIENTRY *qglReadBuffer)(GLenum mode) = NULL;
void (APIENTRY *qglReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) = NULL;
void (APIENTRY *qglRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) = NULL;
void (APIENTRY *qglRectdv)(const GLdouble *v1, const GLdouble *v2) = NULL;
void (APIENTRY *qglRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) = NULL;
void (APIENTRY *qglRectfv)(const GLfloat *v1, const GLfloat *v2) = NULL;
void (APIENTRY *qglRecti)(GLint x1, GLint y1, GLint x2, GLint y2) = NULL;
void (APIENTRY *qglRectiv)(const GLint *v1, const GLint *v2) = NULL;
void (APIENTRY *qglRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2) = NULL;
void (APIENTRY *qglRectsv)(const GLshort *v1, const GLshort *v2) = NULL;
GLint (APIENTRY *qglRenderMode)(GLenum mode) = NULL;
void (APIENTRY *qglRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = NULL;
void (APIENTRY *qglRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = NULL;
void (APIENTRY *qglScaled)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (APIENTRY *qglScalef)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (APIENTRY *qglScissor)(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (APIENTRY *qglSelectBuffer)(GLsizei size, GLuint *buffer) = NULL;
void (APIENTRY *qglShadeModel)(GLenum mode) = NULL;
void (APIENTRY *qglStencilFunc)(GLenum func, GLint ref, GLuint mask) = NULL;
void (APIENTRY *qglStencilMask)(GLuint mask) = NULL;
void (APIENTRY *qglStencilOp)(GLenum fail, GLenum zfail, GLenum zpass) = NULL;
void (APIENTRY *qglTexCoord1d)(GLdouble s) = NULL;
void (APIENTRY *qglTexCoord1dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglTexCoord1f)(GLfloat s) = NULL;
void (APIENTRY *qglTexCoord1fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglTexCoord1i)(GLint s) = NULL;
void (APIENTRY *qglTexCoord1iv)(const GLint *v) = NULL;
void (APIENTRY *qglTexCoord1s)(GLshort s) = NULL;
void (APIENTRY *qglTexCoord1sv)(const GLshort *v) = NULL;
void (APIENTRY *qglTexCoord2d)(GLdouble s, GLdouble t) = NULL;
void (APIENTRY *qglTexCoord2dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglTexCoord2f)(GLfloat s, GLfloat t) = NULL;
void (APIENTRY *qglTexCoord2fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglTexCoord2i)(GLint s, GLint t) = NULL;
void (APIENTRY *qglTexCoord2iv)(const GLint *v) = NULL;
void (APIENTRY *qglTexCoord2s)(GLshort s, GLshort t) = NULL;
void (APIENTRY *qglTexCoord2sv)(const GLshort *v) = NULL;
void (APIENTRY *qglTexCoord3d)(GLdouble s, GLdouble t, GLdouble r) = NULL;
void (APIENTRY *qglTexCoord3dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglTexCoord3f)(GLfloat s, GLfloat t, GLfloat r) = NULL;
void (APIENTRY *qglTexCoord3fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglTexCoord3i)(GLint s, GLint t, GLint r) = NULL;
void (APIENTRY *qglTexCoord3iv)(const GLint *v) = NULL;
void (APIENTRY *qglTexCoord3s)(GLshort s, GLshort t, GLshort r) = NULL;
void (APIENTRY *qglTexCoord3sv)(const GLshort *v) = NULL;
void (APIENTRY *qglTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q) = NULL;
void (APIENTRY *qglTexCoord4dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q) = NULL;
void (APIENTRY *qglTexCoord4fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglTexCoord4i)(GLint s, GLint t, GLint r, GLint q) = NULL;
void (APIENTRY *qglTexCoord4iv)(const GLint *v) = NULL;
void (APIENTRY *qglTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q) = NULL;
void (APIENTRY *qglTexCoord4sv)(const GLshort *v) = NULL;
void (APIENTRY *qglTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) = NULL;
void (APIENTRY *qglTexEnvf)(GLenum target, GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglTexEnvfv)(GLenum target, GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglTexEnvi)(GLenum target, GLenum pname, GLint param) = NULL;
void (APIENTRY *qglTexEnviv)(GLenum target, GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglTexGend)(GLenum coord, GLenum pname, GLdouble param) = NULL;
void (APIENTRY *qglTexGendv)(GLenum coord, GLenum pname, const GLdouble *params) = NULL;
void (APIENTRY *qglTexGenf)(GLenum coord, GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglTexGenfv)(GLenum coord, GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglTexGeni)(GLenum coord, GLenum pname, GLint param) = NULL;
void (APIENTRY *qglTexGeniv)(GLenum coord, GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void (APIENTRY *qglTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void (APIENTRY *qglTexParameterf)(GLenum target, GLenum pname, GLfloat param) = NULL;
void (APIENTRY *qglTexParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = NULL;
void (APIENTRY *qglTexParameteri)(GLenum target, GLenum pname, GLint param) = NULL;
void (APIENTRY *qglTexParameteriv)(GLenum target, GLenum pname, const GLint *params) = NULL;
void (APIENTRY *qglTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void (APIENTRY *qglTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void (APIENTRY *qglTranslated)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (APIENTRY *qglTranslatef)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (APIENTRY *qglVertex2d)(GLdouble x, GLdouble y) = NULL;
void (APIENTRY *qglVertex2dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglVertex2f)(GLfloat x, GLfloat y) = NULL;
void (APIENTRY *qglVertex2fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglVertex2i)(GLint x, GLint y) = NULL;
void (APIENTRY *qglVertex2iv)(const GLint *v) = NULL;
void (APIENTRY *qglVertex2s)(GLshort x, GLshort y) = NULL;
void (APIENTRY *qglVertex2sv)(const GLshort *v) = NULL;
void (APIENTRY *qglVertex3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (APIENTRY *qglVertex3dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglVertex3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (APIENTRY *qglVertex3fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglVertex3i)(GLint x, GLint y, GLint z) = NULL;
void (APIENTRY *qglVertex3iv)(const GLint *v) = NULL;
void (APIENTRY *qglVertex3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (APIENTRY *qglVertex3sv)(const GLshort *v) = NULL;
void (APIENTRY *qglVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (APIENTRY *qglVertex4dv)(const GLdouble *v) = NULL;
void (APIENTRY *qglVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (APIENTRY *qglVertex4fv)(const GLfloat *v) = NULL;
void (APIENTRY *qglVertex4i)(GLint x, GLint y, GLint z, GLint w) = NULL;
void (APIENTRY *qglVertex4iv)(const GLint *v) = NULL;
void (APIENTRY *qglVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (APIENTRY *qglVertex4sv)(const GLshort *v) = NULL;
void (APIENTRY *qglVertexPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) = NULL;
void (APIENTRY *qglViewport)(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;

PROC (WINAPI *qwglGetProcAddress)(LPCSTR) = NULL;

// GL_ARB_shader_objects
void (APIENTRY *qglDeleteObjectARB)(GLhandleARB obj) = NULL;
GLhandleARB (APIENTRY *qglGetHandleARB)(GLenum pname) = NULL;
void (APIENTRY *qglDetachObjectARB)(GLhandleARB containerObj, GLhandleARB attachedObj) = NULL;
GLhandleARB (APIENTRY *qglCreateShaderObjectARB)(GLenum shaderType) = NULL;
void (APIENTRY *qglShaderSourceARB)(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) = NULL;
void (APIENTRY *qglCompileShaderARB)(GLhandleARB shaderObj) = NULL;
GLhandleARB (APIENTRY *qglCreateProgramObjectARB)(void) = NULL;
void (APIENTRY *qglAttachObjectARB)(GLhandleARB containerObj, GLhandleARB obj) = NULL;
void (APIENTRY *qglLinkProgramARB)(GLhandleARB programObj) = NULL;
void (APIENTRY *qglUseProgramObjectARB)(GLhandleARB programObj) = NULL;
void (APIENTRY *qglValidateProgramARB)(GLhandleARB programObj) = NULL;
void (APIENTRY *qglUniform1fARB)(GLint location, GLfloat v0) = NULL;
void (APIENTRY *qglUniform2fARB)(GLint location, GLfloat v0, GLfloat v1) = NULL;
void (APIENTRY *qglUniform3fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = NULL;
void (APIENTRY *qglUniform4fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = NULL;
void (APIENTRY *qglUniform1iARB)(GLint location, GLint v0) = NULL;
void (APIENTRY *qglUniform2iARB)(GLint location, GLint v0, GLint v1) = NULL;
void (APIENTRY *qglUniform3iARB)(GLint location, GLint v0, GLint v1, GLint v2) = NULL;
void (APIENTRY *qglUniform4iARB)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = NULL;
void (APIENTRY *qglUniform1fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void (APIENTRY *qglUniform2fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void (APIENTRY *qglUniform3fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void (APIENTRY *qglUniform4fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void (APIENTRY *qglUniform1ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void (APIENTRY *qglUniform2ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void (APIENTRY *qglUniform3ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void (APIENTRY *qglUniform4ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void (APIENTRY *qglUniformMatrix2fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = NULL;
void (APIENTRY *qglUniformMatrix3fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = NULL;
void (APIENTRY *qglUniformMatrix4fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = NULL;
void (APIENTRY *qglGetObjectParameterfvARB)(GLhandleARB obj, GLenum pname, GLfloat *params) = NULL;
void (APIENTRY *qglGetObjectParameterivARB)(GLhandleARB obj, GLenum pname, GLint *params) = NULL;
void (APIENTRY *qglGetInfoLogARB)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) = NULL;
void (APIENTRY *qglGetAttachedObjectsARB)(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) = NULL;
GLint (APIENTRY *qglGetUniformLocationARB)(GLhandleARB programObj, const GLcharARB *name) = NULL;
void (APIENTRY *qglGetActiveUniformARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) = NULL;
void (APIENTRY *qglGetUniformfvARB)(GLhandleARB programObj, GLint location, GLfloat *params) = NULL;
void (APIENTRY *qglGetUniformivARB)(GLhandleARB programObj, GLint location, GLint *params) = NULL;
void (APIENTRY *qglGetShaderSourceARB)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) = NULL;


void QGL_InitExtensions(void);

void QGL_Init(void)
{
	HMODULE hOpenGL = GetModuleHandleA("opengl32.dll");

	if (hOpenGL)
	{
		qglAccum = (void (APIENTRY *)(GLenum, GLfloat))GetProcAddress(hOpenGL, "glAccum");
		qglAlphaFunc = (void (APIENTRY *)(GLenum, GLclampf))GetProcAddress(hOpenGL, "glAlphaFunc");
		qglAreTexturesResident = (GLboolean (APIENTRY *)(GLsizei, const GLuint *, GLboolean *))GetProcAddress(hOpenGL, "glAreTexturesResident");
		qglArrayElement = (void (APIENTRY *)(GLint))GetProcAddress(hOpenGL, "glArrayElement");
		qglBegin = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glBegin");
		qglBindTexture = (void (APIENTRY *)(GLenum, GLuint))GetProcAddress(hOpenGL, "glBindTexture");
		qglBitmap = (void (APIENTRY *)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *))GetProcAddress(hOpenGL, "glBitmap");
		qglBlendFunc = (void (APIENTRY *)(GLenum, GLenum))GetProcAddress(hOpenGL, "glBlendFunc");
		qglCallList = (void (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glCallList");
		qglCallLists = (void (APIENTRY *)(GLsizei, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glCallLists");
		qglClear = (void (APIENTRY *)(GLbitfield))GetProcAddress(hOpenGL, "glClear");
		qglClearAccum = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glClearAccum");
		qglClearColor = (void (APIENTRY *)(GLclampf, GLclampf, GLclampf, GLclampf))GetProcAddress(hOpenGL, "glClearColor");
		qglClearDepth = (void (APIENTRY *)(GLclampd))GetProcAddress(hOpenGL, "glClearDepth");
		qglClearIndex = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glClearIndex");
		qglClearStencil = (void (APIENTRY *)(GLint))GetProcAddress(hOpenGL, "glClearStencil");
		qglClipPlane = (void (APIENTRY *)(GLenum, const GLdouble *))GetProcAddress(hOpenGL, "glClipPlane");
		qglColor3b = (void (APIENTRY *)(GLbyte, GLbyte, GLbyte))GetProcAddress(hOpenGL, "glColor3b");
		qglColor3bv = (void (APIENTRY *)(const GLbyte *))GetProcAddress(hOpenGL, "glColor3bv");
		qglColor3d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glColor3d");
		qglColor3dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glColor3dv");
		qglColor3f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glColor3f");
		qglColor3fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glColor3fv");
		qglColor3i = (void (APIENTRY *)(GLint, GLint, GLint))GetProcAddress(hOpenGL, "glColor3i");
		qglColor3iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glColor3iv");
		qglColor3s = (void (APIENTRY *)(GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glColor3s");
		qglColor3sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glColor3sv");
		qglColor3ub = (void (APIENTRY *)(GLubyte, GLubyte, GLubyte))GetProcAddress(hOpenGL, "glColor3ub");
		qglColor3ubv = (void (APIENTRY *)(const GLubyte *))GetProcAddress(hOpenGL, "glColor3ubv");
		qglColor3ui = (void (APIENTRY *)(GLuint, GLuint, GLuint))GetProcAddress(hOpenGL, "glColor3ui");
		qglColor3uiv = (void (APIENTRY *)(const GLuint *))GetProcAddress(hOpenGL, "glColor3uiv");
		qglColor3us = (void (APIENTRY *)(GLushort, GLushort, GLushort))GetProcAddress(hOpenGL, "glColor3us");
		qglColor3usv = (void (APIENTRY *)(const GLushort *))GetProcAddress(hOpenGL, "glColor3usv");
		qglColor4b = (void (APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))GetProcAddress(hOpenGL, "glColor4b");
		qglColor4bv = (void (APIENTRY *)(const GLbyte *))GetProcAddress(hOpenGL, "glColor4bv");
		qglColor4d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glColor4d");
		qglColor4dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glColor4dv");
		qglColor4f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glColor4f");
		qglColor4fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glColor4fv");
		qglColor4i = (void (APIENTRY *)(GLint, GLint, GLint, GLint))GetProcAddress(hOpenGL, "glColor4i");
		qglColor4iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glColor4iv");
		qglColor4s = (void (APIENTRY *)(GLshort, GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glColor4s");
		qglColor4sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glColor4sv");
		qglColor4ub = (void (APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte))GetProcAddress(hOpenGL, "glColor4ub");
		qglColor4ubv = (void (APIENTRY *)(const GLubyte *))GetProcAddress(hOpenGL, "glColor4ubv");
		qglColor4ui = (void (APIENTRY *)(GLuint, GLuint, GLuint, GLuint))GetProcAddress(hOpenGL, "glColor4ui");
		qglColor4uiv = (void (APIENTRY *)(const GLuint *))GetProcAddress(hOpenGL, "glColor4uiv");
		qglColor4us = (void (APIENTRY *)(GLushort, GLushort, GLushort, GLushort))GetProcAddress(hOpenGL, "glColor4us");
		qglColor4usv = (void (APIENTRY *)(const GLushort *))GetProcAddress(hOpenGL, "glColor4usv");
		qglColorMask = (void (APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))GetProcAddress(hOpenGL, "glColorMask");
		qglColorMaterial = (void (APIENTRY *)(GLenum, GLenum))GetProcAddress(hOpenGL, "glColorMaterial");
		qglColorPointer = (void (APIENTRY *)(GLint, GLenum, GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glColorPointer");
		qglCopyPixels = (void (APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum))GetProcAddress(hOpenGL, "glCopyPixels");
		qglCopyTexImage1D = (void (APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))GetProcAddress(hOpenGL, "glCopyTexImage1D");
		qglCopyTexImage2D = (void (APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))GetProcAddress(hOpenGL, "glCopyTexImage2D");
		qglCopyTexSubImage1D = (void (APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))GetProcAddress(hOpenGL, "glCopyTexSubImage1D");
		qglCopyTexSubImage2D = (void (APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))GetProcAddress(hOpenGL, "glCopyTexSubImage2D");
		qglCullFace = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glCullFace");
		qglDeleteLists = (void (APIENTRY *)(GLuint, GLsizei))GetProcAddress(hOpenGL, "glDeleteLists");
		qglDeleteTextures = (void (APIENTRY *)(GLsizei, const GLuint *))GetProcAddress(hOpenGL, "glDeleteTextures");
		qglDepthFunc = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glDepthFunc");
		qglDepthMask = (void (APIENTRY *)(GLboolean))GetProcAddress(hOpenGL, "glDepthMask");
		qglDepthRange = (void (APIENTRY *)(GLclampd, GLclampd))GetProcAddress(hOpenGL, "glDepthRange");
		qglDisable = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glDisable");
		qglDisableClientState = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glDisableClientState");
		qglDrawArrays = (void (APIENTRY *)(GLenum, GLint, GLsizei))GetProcAddress(hOpenGL, "glDrawArrays");
		qglDrawBuffer = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glDrawBuffer");
		qglDrawElements = (void (APIENTRY *)(GLenum, GLsizei, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glDrawElements");
		qglDrawPixels = (void (APIENTRY *)(GLsizei, GLsizei, GLenum, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glDrawPixels");
		qglEdgeFlag = (void (APIENTRY *)(GLboolean))GetProcAddress(hOpenGL, "glEdgeFlag");
		qglEdgeFlagPointer = (void (APIENTRY *)(GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glEdgeFlagPointer");
		qglEdgeFlagv = (void (APIENTRY *)(const GLboolean *))GetProcAddress(hOpenGL, "glEdgeFlagv");
		qglEnable = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glEnable");
		qglEnableClientState = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glEnableClientState");
		qglEnd = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glEnd");
		qglEndList = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glEndList");
		qglEvalCoord1d = (void (APIENTRY *)(GLdouble))GetProcAddress(hOpenGL, "glEvalCoord1d");
		qglEvalCoord1dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glEvalCoord1dv");
		qglEvalCoord1f = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glEvalCoord1f");
		qglEvalCoord1fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glEvalCoord1fv");
		qglEvalCoord2d = (void (APIENTRY *)(GLdouble, GLdouble))GetProcAddress(hOpenGL, "glEvalCoord2d");
		qglEvalCoord2dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glEvalCoord2dv");
		qglEvalCoord2f = (void (APIENTRY *)(GLfloat, GLfloat))GetProcAddress(hOpenGL, "glEvalCoord2f");
		qglEvalCoord2fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glEvalCoord2fv");
		qglEvalMesh1 = (void (APIENTRY *)(GLenum, GLint, GLint))GetProcAddress(hOpenGL, "glEvalMesh1");
		qglEvalMesh2 = (void (APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))GetProcAddress(hOpenGL, "glEvalMesh2");
		qglEvalPoint1 = (void (APIENTRY *)(GLint))GetProcAddress(hOpenGL, "glEvalPoint1");
		qglEvalPoint2 = (void (APIENTRY *)(GLint, GLint))GetProcAddress(hOpenGL, "glEvalPoint2");
		qglFeedbackBuffer = (void (APIENTRY *)(GLsizei, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glFeedbackBuffer");
		qglFinish = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glFinish");
		qglFlush = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glFlush");
		qglFogf = (void (APIENTRY *)(GLenum, GLfloat))GetProcAddress(hOpenGL, "glFogf");
		qglFogfv = (void (APIENTRY *)(GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glFogfv");
		qglFogi = (void (APIENTRY *)(GLenum, GLint))GetProcAddress(hOpenGL, "glFogi");
		qglFogiv = (void (APIENTRY *)(GLenum, const GLint *))GetProcAddress(hOpenGL, "glFogiv");
		qglFrontFace = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glFrontFace");
		qglFrustum = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glFrustum");
		qglGenLists = (GLuint (APIENTRY *)(GLsizei))GetProcAddress(hOpenGL, "glGenLists");
		qglGenTextures = (void (APIENTRY *)(GLsizei, GLuint *))GetProcAddress(hOpenGL, "glGenTextures");
		qglGetBooleanv = (void (APIENTRY *)(GLenum, GLboolean *))GetProcAddress(hOpenGL, "glGetBooleanv");
		qglGetClipPlane = (void (APIENTRY *)(GLenum, GLdouble *))GetProcAddress(hOpenGL, "glGetClipPlane");
		qglGetDoublev = (void (APIENTRY *)(GLenum, GLdouble *))GetProcAddress(hOpenGL, "glGetDoublev");
		qglGetError = (GLenum (APIENTRY *)())GetProcAddress(hOpenGL, "glGetError");
		qglGetFloatv = (void (APIENTRY *)(GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetFloatv");
		qglGetIntegerv = (void (APIENTRY *)(GLenum, GLint *))GetProcAddress(hOpenGL, "glGetIntegerv");
		qglGetLightfv = (void (APIENTRY *)(GLenum, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetLightfv");
		qglGetLightiv = (void (APIENTRY *)(GLenum, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetLightiv");
		qglGetMapdv = (void (APIENTRY *)(GLenum, GLenum, GLdouble *))GetProcAddress(hOpenGL, "glGetMapdv");
		qglGetMapfv = (void (APIENTRY *)(GLenum, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetMapfv");
		qglGetMapiv = (void (APIENTRY *)(GLenum, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetMapiv");
		qglGetMaterialfv = (void (APIENTRY *)(GLenum, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetMaterialfv");
		qglGetMaterialiv = (void (APIENTRY *)(GLenum, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetMaterialiv");
		qglGetPixelMapfv = (void (APIENTRY *)(GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetPixelMapfv");
		qglGetPixelMapuiv = (void (APIENTRY *)(GLenum, GLuint *))GetProcAddress(hOpenGL, "glGetPixelMapuiv");
		qglGetPixelMapusv = (void (APIENTRY *)(GLenum, GLushort *))GetProcAddress(hOpenGL, "glGetPixelMapusv");
		qglGetPointerv = (void (APIENTRY *)(GLenum, GLvoid* *))GetProcAddress(hOpenGL, "glGetPointerv");
		qglGetPolygonStipple = (void (APIENTRY *)(GLubyte *))GetProcAddress(hOpenGL, "glGetPolygonStipple");
		qglGetString = (const GLubyte * (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glGetString");
		qglGetTexEnvfv = (void (APIENTRY *)(GLenum, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetTexEnvfv");
		qglGetTexEnviv = (void (APIENTRY *)(GLenum, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetTexEnviv");
		qglGetTexGendv = (void (APIENTRY *)(GLenum, GLenum, GLdouble *))GetProcAddress(hOpenGL, "glGetTexGendv");
		qglGetTexGenfv = (void (APIENTRY *)(GLenum, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetTexGenfv");
		qglGetTexGeniv = (void (APIENTRY *)(GLenum, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetTexGeniv");
		qglGetTexImage = (void (APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLvoid *))GetProcAddress(hOpenGL, "glGetTexImage");
		qglGetTexLevelParameterfv = (void (APIENTRY *)(GLenum, GLint, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetTexLevelParameterfv");
		qglGetTexLevelParameteriv = (void (APIENTRY *)(GLenum, GLint, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetTexLevelParameteriv");
		qglGetTexParameterfv = (void (APIENTRY *)(GLenum, GLenum, GLfloat *))GetProcAddress(hOpenGL, "glGetTexParameterfv");
		qglGetTexParameteriv = (void (APIENTRY *)(GLenum, GLenum, GLint *))GetProcAddress(hOpenGL, "glGetTexParameteriv");
		qglHint = (void (APIENTRY *)(GLenum, GLenum))GetProcAddress(hOpenGL, "glHint");
		qglIndexMask = (void (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glIndexMask");
		qglIndexPointer = (void (APIENTRY *)(GLenum, GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glIndexPointer");
		qglIndexd = (void (APIENTRY *)(GLdouble))GetProcAddress(hOpenGL, "glIndexd");
		qglIndexdv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glIndexdv");
		qglIndexf = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glIndexf");
		qglIndexfv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glIndexfv");
		qglIndexi = (void (APIENTRY *)(GLint))GetProcAddress(hOpenGL, "glIndexi");
		qglIndexiv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glIndexiv");
		qglIndexs = (void (APIENTRY *)(GLshort))GetProcAddress(hOpenGL, "glIndexs");
		qglIndexsv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glIndexsv");
		qglIndexub = (void (APIENTRY *)(GLubyte))GetProcAddress(hOpenGL, "glIndexub");
		qglIndexubv = (void (APIENTRY *)(const GLubyte *))GetProcAddress(hOpenGL, "glIndexubv");
		qglInitNames = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glInitNames");
		qglInterleavedArrays = (void (APIENTRY *)(GLenum, GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glInterleavedArrays");
		qglIsEnabled = (GLboolean (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glIsEnabled");
		qglIsList = (GLboolean (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glIsList");
		qglIsTexture = (GLboolean (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glIsTexture");
		qglLightModelf = (void (APIENTRY *)(GLenum, GLfloat))GetProcAddress(hOpenGL, "glLightModelf");
		qglLightModelfv = (void (APIENTRY *)(GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glLightModelfv");
		qglLightModeli = (void (APIENTRY *)(GLenum, GLint))GetProcAddress(hOpenGL, "glLightModeli");
		qglLightModeliv = (void (APIENTRY *)(GLenum, const GLint *))GetProcAddress(hOpenGL, "glLightModeliv");
		qglLightf = (void (APIENTRY *)(GLenum, GLenum, GLfloat))GetProcAddress(hOpenGL, "glLightf");
		qglLightfv = (void (APIENTRY *)(GLenum, GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glLightfv");
		qglLighti = (void (APIENTRY *)(GLenum, GLenum, GLint))GetProcAddress(hOpenGL, "glLighti");
		qglLightiv = (void (APIENTRY *)(GLenum, GLenum, const GLint *))GetProcAddress(hOpenGL, "glLightiv");
		qglLineStipple = (void (APIENTRY *)(GLint, GLushort))GetProcAddress(hOpenGL, "glLineStipple");
		qglLineWidth = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glLineWidth");
		qglListBase = (void (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glListBase");
		qglLoadIdentity = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glLoadIdentity");
		qglLoadMatrixd = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glLoadMatrixd");
		qglLoadMatrixf = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glLoadMatrixf");
		qglLoadName = (void (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glLoadName");
		qglLogicOp = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glLogicOp");
		qglMap1d = (void (APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *))GetProcAddress(hOpenGL, "glMap1d");
		qglMap1f = (void (APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *))GetProcAddress(hOpenGL, "glMap1f");
		qglMap2d = (void (APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))GetProcAddress(hOpenGL, "glMap2d");
		qglMap2f = (void (APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))GetProcAddress(hOpenGL, "glMap2f");
		qglMapGrid1d = (void (APIENTRY *)(GLint, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glMapGrid1d");
		qglMapGrid1f = (void (APIENTRY *)(GLint, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glMapGrid1f");
		qglMapGrid2d = (void (APIENTRY *)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glMapGrid2d");
		qglMapGrid2f = (void (APIENTRY *)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glMapGrid2f");
		qglMaterialf = (void (APIENTRY *)(GLenum, GLenum, GLfloat))GetProcAddress(hOpenGL, "glMaterialf");
		qglMaterialfv = (void (APIENTRY *)(GLenum, GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glMaterialfv");
		qglMateriali = (void (APIENTRY *)(GLenum, GLenum, GLint))GetProcAddress(hOpenGL, "glMateriali");
		qglMaterialiv = (void (APIENTRY *)(GLenum, GLenum, const GLint *))GetProcAddress(hOpenGL, "glMaterialiv");
		qglMatrixMode = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glMatrixMode");
		qglMultMatrixd = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glMultMatrixd");
		qglMultMatrixf = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glMultMatrixf");
		qglNewList = (void (APIENTRY *)(GLuint, GLenum))GetProcAddress(hOpenGL, "glNewList");
		qglNormal3b = (void (APIENTRY *)(GLbyte, GLbyte, GLbyte))GetProcAddress(hOpenGL, "glNormal3b");
		qglNormal3bv = (void (APIENTRY *)(const GLbyte *))GetProcAddress(hOpenGL, "glNormal3bv");
		qglNormal3d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glNormal3d");
		qglNormal3dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glNormal3dv");
		qglNormal3f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glNormal3f");
		qglNormal3fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glNormal3fv");
		qglNormal3i = (void (APIENTRY *)(GLint, GLint, GLint))GetProcAddress(hOpenGL, "glNormal3i");
		qglNormal3iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glNormal3iv");
		qglNormal3s = (void (APIENTRY *)(GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glNormal3s");
		qglNormal3sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glNormal3sv");
		qglNormalPointer = (void (APIENTRY *)(GLenum, GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glNormalPointer");
		qglOrtho = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glOrtho");
		qglPassThrough = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glPassThrough");
		qglPixelMapfv = (void (APIENTRY *)(GLenum, GLsizei, const GLfloat *))GetProcAddress(hOpenGL, "glPixelMapfv");
		qglPixelMapuiv = (void (APIENTRY *)(GLenum, GLsizei, const GLuint *))GetProcAddress(hOpenGL, "glPixelMapuiv");
		qglPixelMapusv = (void (APIENTRY *)(GLenum, GLsizei, const GLushort *))GetProcAddress(hOpenGL, "glPixelMapusv");
		qglPixelStoref = (void (APIENTRY *)(GLenum, GLfloat))GetProcAddress(hOpenGL, "glPixelStoref");
		qglPixelStorei = (void (APIENTRY *)(GLenum, GLint))GetProcAddress(hOpenGL, "glPixelStorei");
		qglPixelTransferf = (void (APIENTRY *)(GLenum, GLfloat))GetProcAddress(hOpenGL, "glPixelTransferf");
		qglPixelTransferi = (void (APIENTRY *)(GLenum, GLint))GetProcAddress(hOpenGL, "glPixelTransferi");
		qglPixelZoom = (void (APIENTRY *)(GLfloat, GLfloat))GetProcAddress(hOpenGL, "glPixelZoom");
		qglPointSize = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glPointSize");
		qglPolygonMode = (void (APIENTRY *)(GLenum, GLenum))GetProcAddress(hOpenGL, "glPolygonMode");
		qglPolygonOffset = (void (APIENTRY *)(GLfloat, GLfloat))GetProcAddress(hOpenGL, "glPolygonOffset");
		qglPolygonStipple = (void (APIENTRY *)(const GLubyte *))GetProcAddress(hOpenGL, "glPolygonStipple");
		qglPopAttrib = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glPopAttrib");
		qglPopClientAttrib = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glPopClientAttrib");
		qglPopMatrix = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glPopMatrix");
		qglPopName = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glPopName");
		qglPrioritizeTextures = (void (APIENTRY *)(GLsizei, const GLuint *, const GLclampf *))GetProcAddress(hOpenGL, "glPrioritizeTextures");
		qglPushAttrib = (void (APIENTRY *)(GLbitfield))GetProcAddress(hOpenGL, "glPushAttrib");
		qglPushClientAttrib = (void (APIENTRY *)(GLbitfield))GetProcAddress(hOpenGL, "glPushClientAttrib");
		qglPushMatrix = (void (APIENTRY *)())GetProcAddress(hOpenGL, "glPushMatrix");
		qglPushName = (void (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glPushName");
		qglRasterPos2d = (void (APIENTRY *)(GLdouble, GLdouble))GetProcAddress(hOpenGL, "glRasterPos2d");
		qglRasterPos2dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glRasterPos2dv");
		qglRasterPos2f = (void (APIENTRY *)(GLfloat, GLfloat))GetProcAddress(hOpenGL, "glRasterPos2f");
		qglRasterPos2fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glRasterPos2fv");
		qglRasterPos2i = (void (APIENTRY *)(GLint, GLint))GetProcAddress(hOpenGL, "glRasterPos2i");
		qglRasterPos2iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glRasterPos2iv");
		qglRasterPos2s = (void (APIENTRY *)(GLshort, GLshort))GetProcAddress(hOpenGL, "glRasterPos2s");
		qglRasterPos2sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glRasterPos2sv");
		qglRasterPos3d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glRasterPos3d");
		qglRasterPos3dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glRasterPos3dv");
		qglRasterPos3f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glRasterPos3f");
		qglRasterPos3fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glRasterPos3fv");
		qglRasterPos3i = (void (APIENTRY *)(GLint, GLint, GLint))GetProcAddress(hOpenGL, "glRasterPos3i");
		qglRasterPos3iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glRasterPos3iv");
		qglRasterPos3s = (void (APIENTRY *)(GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glRasterPos3s");
		qglRasterPos3sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glRasterPos3sv");
		qglRasterPos4d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glRasterPos4d");
		qglRasterPos4dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glRasterPos4dv");
		qglRasterPos4f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glRasterPos4f");
		qglRasterPos4fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glRasterPos4fv");
		qglRasterPos4i = (void (APIENTRY *)(GLint, GLint, GLint, GLint))GetProcAddress(hOpenGL, "glRasterPos4i");
		qglRasterPos4iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glRasterPos4iv");
		qglRasterPos4s = (void (APIENTRY *)(GLshort, GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glRasterPos4s");
		qglRasterPos4sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glRasterPos4sv");
		qglReadBuffer = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glReadBuffer");
		qglReadPixels = (void (APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *))GetProcAddress(hOpenGL, "glReadPixels");
		qglRectd = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glRectd");
		qglRectdv = (void (APIENTRY *)(const GLdouble *, const GLdouble *))GetProcAddress(hOpenGL, "glRectdv");
		qglRectf = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glRectf");
		qglRectfv = (void (APIENTRY *)(const GLfloat *, const GLfloat *))GetProcAddress(hOpenGL, "glRectfv");
		qglRecti = (void (APIENTRY *)(GLint, GLint, GLint, GLint))GetProcAddress(hOpenGL, "glRecti");
		qglRectiv = (void (APIENTRY *)(const GLint *, const GLint *))GetProcAddress(hOpenGL, "glRectiv");
		qglRects = (void (APIENTRY *)(GLshort, GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glRects");
		qglRectsv = (void (APIENTRY *)(const GLshort *, const GLshort *))GetProcAddress(hOpenGL, "glRectsv");
		qglRenderMode = (GLint (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glRenderMode");
		qglRotated = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glRotated");
		qglRotatef = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glRotatef");
		qglScaled = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glScaled");
		qglScalef = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glScalef");
		qglScissor = (void (APIENTRY *)(GLint, GLint, GLsizei, GLsizei))GetProcAddress(hOpenGL, "glScissor");
		qglSelectBuffer = (void (APIENTRY *)(GLsizei, GLuint *))GetProcAddress(hOpenGL, "glSelectBuffer");
		qglShadeModel = (void (APIENTRY *)(GLenum))GetProcAddress(hOpenGL, "glShadeModel");
		qglStencilFunc = (void (APIENTRY *)(GLenum, GLint, GLuint))GetProcAddress(hOpenGL, "glStencilFunc");
		qglStencilMask = (void (APIENTRY *)(GLuint))GetProcAddress(hOpenGL, "glStencilMask");
		qglStencilOp = (void (APIENTRY *)(GLenum, GLenum, GLenum))GetProcAddress(hOpenGL, "glStencilOp");
		qglTexCoord1d = (void (APIENTRY *)(GLdouble))GetProcAddress(hOpenGL, "glTexCoord1d");
		qglTexCoord1dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glTexCoord1dv");
		qglTexCoord1f = (void (APIENTRY *)(GLfloat))GetProcAddress(hOpenGL, "glTexCoord1f");
		qglTexCoord1fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glTexCoord1fv");
		qglTexCoord1i = (void (APIENTRY *)(GLint))GetProcAddress(hOpenGL, "glTexCoord1i");
		qglTexCoord1iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glTexCoord1iv");
		qglTexCoord1s = (void (APIENTRY *)(GLshort))GetProcAddress(hOpenGL, "glTexCoord1s");
		qglTexCoord1sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glTexCoord1sv");
		qglTexCoord2d = (void (APIENTRY *)(GLdouble, GLdouble))GetProcAddress(hOpenGL, "glTexCoord2d");
		qglTexCoord2dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glTexCoord2dv");
		qglTexCoord2f = (void (APIENTRY *)(GLfloat, GLfloat))GetProcAddress(hOpenGL, "glTexCoord2f");
		qglTexCoord2fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glTexCoord2fv");
		qglTexCoord2i = (void (APIENTRY *)(GLint, GLint))GetProcAddress(hOpenGL, "glTexCoord2i");
		qglTexCoord2iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glTexCoord2iv");
		qglTexCoord2s = (void (APIENTRY *)(GLshort, GLshort))GetProcAddress(hOpenGL, "glTexCoord2s");
		qglTexCoord2sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glTexCoord2sv");
		qglTexCoord3d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glTexCoord3d");
		qglTexCoord3dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glTexCoord3dv");
		qglTexCoord3f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glTexCoord3f");
		qglTexCoord3fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glTexCoord3fv");
		qglTexCoord3i = (void (APIENTRY *)(GLint, GLint, GLint))GetProcAddress(hOpenGL, "glTexCoord3i");
		qglTexCoord3iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glTexCoord3iv");
		qglTexCoord3s = (void (APIENTRY *)(GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glTexCoord3s");
		qglTexCoord3sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glTexCoord3sv");
		qglTexCoord4d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glTexCoord4d");
		qglTexCoord4dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glTexCoord4dv");
		qglTexCoord4f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glTexCoord4f");
		qglTexCoord4fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glTexCoord4fv");
		qglTexCoord4i = (void (APIENTRY *)(GLint, GLint, GLint, GLint))GetProcAddress(hOpenGL, "glTexCoord4i");
		qglTexCoord4iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glTexCoord4iv");
		qglTexCoord4s = (void (APIENTRY *)(GLshort, GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glTexCoord4s");
		qglTexCoord4sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glTexCoord4sv");
		qglTexCoordPointer = (void (APIENTRY *)(GLint, GLenum, GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glTexCoordPointer");
		qglTexEnvf = (void (APIENTRY *)(GLenum, GLenum, GLfloat))GetProcAddress(hOpenGL, "glTexEnvf");
		qglTexEnvfv = (void (APIENTRY *)(GLenum, GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glTexEnvfv");
		qglTexEnvi = (void (APIENTRY *)(GLenum, GLenum, GLint))GetProcAddress(hOpenGL, "glTexEnvi");
		qglTexEnviv = (void (APIENTRY *)(GLenum, GLenum, const GLint *))GetProcAddress(hOpenGL, "glTexEnviv");
		qglTexGend = (void (APIENTRY *)(GLenum, GLenum, GLdouble))GetProcAddress(hOpenGL, "glTexGend");
		qglTexGendv = (void (APIENTRY *)(GLenum, GLenum, const GLdouble *))GetProcAddress(hOpenGL, "glTexGendv");
		qglTexGenf = (void (APIENTRY *)(GLenum, GLenum, GLfloat))GetProcAddress(hOpenGL, "glTexGenf");
		qglTexGenfv = (void (APIENTRY *)(GLenum, GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glTexGenfv");
		qglTexGeni = (void (APIENTRY *)(GLenum, GLenum, GLint))GetProcAddress(hOpenGL, "glTexGeni");
		qglTexGeniv = (void (APIENTRY *)(GLenum, GLenum, const GLint *))GetProcAddress(hOpenGL, "glTexGeniv");
		qglTexImage1D = (void (APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glTexImage1D");
		qglTexImage2D = (void (APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glTexImage2D");
		qglTexParameterf = (void (APIENTRY *)(GLenum, GLenum, GLfloat))GetProcAddress(hOpenGL, "glTexParameterf");
		qglTexParameterfv = (void (APIENTRY *)(GLenum, GLenum, const GLfloat *))GetProcAddress(hOpenGL, "glTexParameterfv");
		qglTexParameteri = (void (APIENTRY *)(GLenum, GLenum, GLint))GetProcAddress(hOpenGL, "glTexParameteri");
		qglTexParameteriv = (void (APIENTRY *)(GLenum, GLenum, const GLint *))GetProcAddress(hOpenGL, "glTexParameteriv");
		qglTexSubImage1D = (void (APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glTexSubImage1D");
		qglTexSubImage2D = (void (APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *))GetProcAddress(hOpenGL, "glTexSubImage2D");
		qglTranslated = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glTranslated");
		qglTranslatef = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glTranslatef");
		qglVertex2d = (void (APIENTRY *)(GLdouble, GLdouble))GetProcAddress(hOpenGL, "glVertex2d");
		qglVertex2dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glVertex2dv");
		qglVertex2f = (void (APIENTRY *)(GLfloat, GLfloat))GetProcAddress(hOpenGL, "glVertex2f");
		qglVertex2fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glVertex2fv");
		qglVertex2i = (void (APIENTRY *)(GLint, GLint))GetProcAddress(hOpenGL, "glVertex2i");
		qglVertex2iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glVertex2iv");
		qglVertex2s = (void (APIENTRY *)(GLshort, GLshort))GetProcAddress(hOpenGL, "glVertex2s");
		qglVertex2sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glVertex2sv");
		qglVertex3d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glVertex3d");
		qglVertex3dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glVertex3dv");
		qglVertex3f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glVertex3f");
		qglVertex3fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glVertex3fv");
		qglVertex3i = (void (APIENTRY *)(GLint, GLint, GLint))GetProcAddress(hOpenGL, "glVertex3i");
		qglVertex3iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glVertex3iv");
		qglVertex3s = (void (APIENTRY *)(GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glVertex3s");
		qglVertex3sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glVertex3sv");
		qglVertex4d = (void (APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))GetProcAddress(hOpenGL, "glVertex4d");
		qglVertex4dv = (void (APIENTRY *)(const GLdouble *))GetProcAddress(hOpenGL, "glVertex4dv");
		qglVertex4f = (void (APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))GetProcAddress(hOpenGL, "glVertex4f");
		qglVertex4fv = (void (APIENTRY *)(const GLfloat *))GetProcAddress(hOpenGL, "glVertex4fv");
		qglVertex4i = (void (APIENTRY *)(GLint, GLint, GLint, GLint))GetProcAddress(hOpenGL, "glVertex4i");
		qglVertex4iv = (void (APIENTRY *)(const GLint *))GetProcAddress(hOpenGL, "glVertex4iv");
		qglVertex4s = (void (APIENTRY *)(GLshort, GLshort, GLshort, GLshort))GetProcAddress(hOpenGL, "glVertex4s");
		qglVertex4sv = (void (APIENTRY *)(const GLshort *))GetProcAddress(hOpenGL, "glVertex4sv");
		qglVertexPointer = (void (APIENTRY *)(GLint, GLenum, GLsizei, const GLvoid *))GetProcAddress(hOpenGL, "glVertexPointer");
		qglViewport = (void (APIENTRY *)(GLint, GLint, GLsizei, GLsizei))GetProcAddress(hOpenGL, "glViewport");

		*(FARPROC *)&qwglGetProcAddress = GetProcAddress(hOpenGL, "wglGetProcAddress");

		QGL_InitExtensions();
	}
}

void QGL_InitExtensions(void)
{
	const char *szExtensions = (const char *)qglGetString(GL_EXTENSIONS);

	if (strstr(szExtensions, "GL_ARB_shader_objects"))
	{
		*(PROC *)&qglDeleteObjectARB = qwglGetProcAddress("glDeleteObjectARB");
		*(PROC *)&qglGetHandleARB = qwglGetProcAddress("glGetHandleARB");
		*(PROC *)&qglDetachObjectARB = qwglGetProcAddress("glDetachObjectARB");
		*(PROC *)&qglCreateShaderObjectARB = qwglGetProcAddress("glCreateShaderObjectARB");
		*(PROC *)&qglShaderSourceARB = qwglGetProcAddress("glShaderSourceARB");
		*(PROC *)&qglCompileShaderARB = qwglGetProcAddress("glCompileShaderARB");
		*(PROC *)&qglCreateProgramObjectARB = qwglGetProcAddress("glCreateProgramObjectARB");
		*(PROC *)&qglAttachObjectARB = qwglGetProcAddress("glAttachObjectARB");
		*(PROC *)&qglLinkProgramARB = qwglGetProcAddress("glLinkProgramARB");
		*(PROC *)&qglUseProgramObjectARB = qwglGetProcAddress("glUseProgramObjectARB");
		*(PROC *)&qglValidateProgramARB = qwglGetProcAddress("glValidateProgramARB");
		*(PROC *)&qglUniform1fARB = qwglGetProcAddress("glUniform1fARB");
		*(PROC *)&qglUniform2fARB = qwglGetProcAddress("glUniform2fARB");
		*(PROC *)&qglUniform3fARB = qwglGetProcAddress("glUniform3fARB");
		*(PROC *)&qglUniform4fARB = qwglGetProcAddress("glUniform4fARB");
		*(PROC *)&qglUniform1iARB = qwglGetProcAddress("glUniform1iARB");
		*(PROC *)&qglUniform2iARB = qwglGetProcAddress("glUniform2iARB");
		*(PROC *)&qglUniform3iARB = qwglGetProcAddress("glUniform3iARB");
		*(PROC *)&qglUniform4iARB = qwglGetProcAddress("glUniform4iARB");
		*(PROC *)&qglUniform1fvARB = qwglGetProcAddress("glUniform1fvARB");
		*(PROC *)&qglUniform2fvARB = qwglGetProcAddress("glUniform2fvARB");
		*(PROC *)&qglUniform3fvARB = qwglGetProcAddress("glUniform3fvARB");
		*(PROC *)&qglUniform4fvARB = qwglGetProcAddress("glUniform4fvARB");
		*(PROC *)&qglUniform1ivARB = qwglGetProcAddress("glUniform1ivARB");
		*(PROC *)&qglUniform2ivARB = qwglGetProcAddress("glUniform2ivARB");
		*(PROC *)&qglUniform3ivARB = qwglGetProcAddress("glUniform3ivARB");
		*(PROC *)&qglUniform4ivARB = qwglGetProcAddress("glUniform4ivARB");
		*(PROC *)&qglUniformMatrix2fvARB = qwglGetProcAddress("glUniformMatrix2fvARB");
		*(PROC *)&qglUniformMatrix3fvARB = qwglGetProcAddress("glUniformMatrix3fvARB");
		*(PROC *)&qglUniformMatrix4fvARB = qwglGetProcAddress("glUniformMatrix4fvARB");
		*(PROC *)&qglGetObjectParameterfvARB = qwglGetProcAddress("glGetObjectParameterfvARB");
		*(PROC *)&qglGetObjectParameterivARB = qwglGetProcAddress("glGetObjectParameterivARB");
		*(PROC *)&qglGetInfoLogARB = qwglGetProcAddress("glGetInfoLogARB");
		*(PROC *)&qglGetAttachedObjectsARB = qwglGetProcAddress("glGetAttachedObjectsARB");
		*(PROC *)&qglGetUniformLocationARB = qwglGetProcAddress("glGetUniformLocationARB");
		*(PROC *)&qglGetActiveUniformARB = qwglGetProcAddress("glGetActiveUniformARB");
		*(PROC *)&qglGetUniformfvARB = qwglGetProcAddress("glGetUniformfvARB");
		*(PROC *)&qglGetUniformivARB = qwglGetProcAddress("glGetUniformivARB");
		*(PROC *)&qglGetShaderSourceARB = qwglGetProcAddress("glGetShaderSourceARB");
	}
	else
	{
		Sys_Error("OpenGL extension \"GL_ARB_shader_objects\" not found");
	}
}